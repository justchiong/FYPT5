These are the test cases used during the research of CodeQL queries.
For those test cases that are already CodeQL database, just unzip and the query can be runned against the whole folder.
For those not yet in a database, unzip, use CodeQL CLI to create a database.

*******************************************************
1. DiogoMRSilva_websitesVulnerableToSSTI_javascript
Source: LGTM.com
Vulnerabilities: CodeInjection.ql
Is it a CodeQL database: Yes. Can be directly queried.
Description: Compilation of server side template injections

*******************************************************
2. dvna-master
Source: Github
Vulnerabilities: SqlInjection.ql, CommandInjection.ql, CodeInjection.qll, MissingCsrfMiddleware.ql,
                            HardcodedCredentials.ql, XmlBomb.ql, Xxe.ql
Is it a CodeQL database: No. Convert to database first using CodeQL CLI
Description: Uses EJS, Express, NodeJS, MySQL. It is a Vulnerable Web Application. 
                       Most queries are able to detect the related vulnerablility coded into the web application

*******************************************************
3. testcase1
Source: Self-made
Vulnerabilities: -
Is it a CodeQL database:  No. Convert to database first using CodeQL CLI
Description: Made a very simple web application to code with various vulnerabilities. Mainly tried to replicate a scaled down version
                       of the XSS vulnerability in dvna-master using EJS and also replicate a SQL vulnerability. Using EJS, Express, NodeJS, MongoDB.

*******************************************************
4. testcase2
Source: Self-made
Vulnerabilities: Xss.ql, XssThroughDom.ql, SqlInjection.ql, HardcodedCredentials.ql
Is it a CodeQL database:  No. Convert to database first using CodeQL CLI
Description: Using HTML, Express, NodeJS, PostgreSQL. Mainly tried to check for a variant of XSS vulnerability.  Has multiple SQL injection 
                       vulnerability as well.

*******************************************************
3. juice-shop-master
Source:Github
Vulnerabilities: Xss.ql, SqlInjection.ql, CodeInjection.ql, MissinfCsrfMiddleware.ql, Hardcodedcredentials.ql, InsufficientPasswordHash.ql, 
Is it a CodeQL database:  No. Convert to database first using CodeQL CLI
Description: Uses AngularJS, Express, NodeJS, MongoDB. Another Vulnerable Web Application. 

*******************************************************
4. pankajkumarbij_easy-job-intern_javascript
Source: LGTM.com
Vulnerabilities: SqlInjection.ql, HardcodedCredentials.ql, StackTraceExposure.ql
Is it a CodeQL database: Yes. Can be directly queried.
Description: Sourced from LGTM to originally be used as a test case for Stack Trace Exposure.

*******************************************************
5. Prasundas99_Web-Development-Training
Source: LGTM.com
Vulnerabilities: ReflectedXss.ql, Xss.ql, HardcodedCredentials.ql, Cleartextlogging.ql
Is it a CodeQL database: Yes. Can be directly queried.
Description: -

*******************************************************
6. PrismarineJS_node-minecraft-protocol_javascript
Source:LGTM.com
Vulnerabilities: BrokenCryptoAlgorithm.ql
Is it a CodeQL database: Yes. Can be directly queried.
Description: Used to test and experiemtn around for BrokenCryptoAlgorithm.ql

*******************************************************
7. Vulnerable-nodejs-master
Source: Github
Vulnerabilities: CommandInjection.ql, MissingCsrfMiddlware.ql, HardcodedCredentials.ql, 
Is it a CodeQL database: No. Convert to database first using CodeQL CLI
Description: Uses EJS, Express, NodeJS, MongoDB. Fairly simple to understand.

*******************************************************